#!/Users/sam/anaconda3/bin/python

########################################
# IMPORTS
########################################
import matplotlib.pyplot as plt
import numpy as np, os, sys
import argparse
import lmfit 
from astropy.io import fits 
from astropy.timeseries import LombScargle
from scipy.signal import find_peaks
import matplotlib.gridspec as gridspec
from bruce import rv as bruce_rv
import lmfit

def lmfit_func(pars, time, rv, rv_err, return_model = False):
    model = bruce_rv(time, t_zero = pars['t_zero'].value , 
                period=pars['period'].value, 
                K1=pars['K1'].value, 
                fs =pars['fs'].value, 
                fc = pars['fc'].value, V0=pars['V0'].value)
    residuls = rv - model 

    if return_model:
        phase_x = np.linspace(0,1,1000)
        phase_rv = bruce_rv(phase_x, t_zero = 0., 
                        period=1., 
                        K1=pars['K1'].value, 
                        fs =pars['fs'].value, 
                        fc = pars['fc'].value, V0=pars['V0'].value) 
        return residuls, phase_x, phase_rv 
    else : return residuls

########################################
# Argumant parser
########################################
description = '''Spupnic rv merge'''
parser = argparse.ArgumentParser('spupnic_rv_merge', description=description)

parser.add_argument('files', 
                    help='list of files to merge', 
                    nargs='+')

parser.add_argument('-a', 
                    '--mask',
                     help='The grating (overides from header).', type=str, default = 'None')
parser.add_argument('-b', 
                    '--name',
                     help='The name of the object.', type=str, default = 'star')

parser.add_argument('-c', 
                    '--min_period',
                     help='The minimum period of the object.', type=float, default = 5)
parser.add_argument('-d', 
                    '--max_period',
                     help='The maximum period of the object.', type=float, default = 100)
parser.add_argument('--fit', action="store_true", default=False, help="Fit spectra with RV model for each period.")

if __name__=="__main__":
    # First, parse the args 
    args = parser.parse_args()

    # check the mask entry
    if args.mask not in ['A0', 'F0', 'G2', 'K0', 'K5', 'M5']:
        raise ValueError('Mask must be one of: {:}'.format(','.join(['A0', 'F0', 'G2', 'K0', 'K5', 'M5'])))

    # Now load the files
    print('Merging {:,} files'.format(len(args.files)))
    args.files.sort() 

    HJD, RV, RV_ERR, RV_BEST = [],[],[],[] 
    for file in args.files:
        with fits.open(file) as h:
            HJD.append(h[0].header['HJD-OBS'])
            RV.append(h[0].header['{:}_RV'.format(args.mask)])
            RV_ERR.append(h[0].header['{:}_RV_ERR'.format(args.mask)])
            #RV_BEST.append(h[0].header['{:}_RV_BEST'.format(args.mask)])
    HJD = np.array(HJD)
    RV = np.array(RV)
    RV_ERR = np.array(RV_ERR)
    #RV_BEST = np.array(RV_BEST)


    HJD_MIN = int(np.min(HJD))
    plt.errorbar(HJD-HJD_MIN, RV,yerr=RV_ERR, fmt='k.')
    plt.xlabel('HJD - {:,}'.format(HJD_MIN))
    plt.ylabel('RV [km/s]')
    plt.tight_layout()
    plt.savefig('{:}_RVs.png'.format(args.name))
    plt.close() 

    frequency, power = LombScargle(HJD, RV).autopower(samples_per_peak=100, minimum_frequency = 1  /args.max_period, maximum_frequency = 1  /args.min_period)
    period  = 1. / frequency

    peaks, meta = find_peaks(power, distance = 1000)
    peaks = np.array(peaks)[np.argsort(peaks)[:3]]



    fig = plt.figure(constrained_layout=True, figsize = (15,10))
    gs1 = fig.add_gridspec(nrows=2, ncols=3)
    ax1 = fig.add_subplot(gs1[0, :])
    ax2 = [fig.add_subplot(gs1[1, 0]), fig.add_subplot(gs1[1, 1]), fig.add_subplot(gs1[1, 2])]

    ax1.semilogx(period, power, c='k')
    ax1.set(xlabel = 'Period [d]', ylabel='Power')

    count = 0
    for peak in peaks:
        ax2[count].errorbar(HJD/period[peak]%1, RV,yerr=RV_ERR, fmt='k.')
        ax2[count].set(xlabel='Phase', ylabel='RV [km/s]', title='P = {:.3f}'.format(period[peak]))
        if args.fit:
            # Create the parameters
            params = lmfit.Parameters()
            params.add('t_zero', value=np.median(HJD), min=np.median(HJD) - period[peak]/2, max=np.median(HJD) + period[peak]/2)
            params.add('period', value=period[peak], min=period[peak]-0.1, max = period[peak]+0.1)
            params.add('K1', value=np.max(RV) - np.min(RV), min=1e-3, max = 50 )
            params.add('fs', value=0, min=-0.8, max = 0.8 )
            params.add('fc', value=0, min=-0.8, max = 0.8 )
            params.add('V0', value=np.median(RV), min=np.median(RV)-100, max = np.median(RV)+100 )
            residual, phase_x, phase_rv = lmfit_func(params, HJD, RV, RV_ERR, return_model = True)
            ax2[count].plot(phase_x, phase_rv, 'g', alpha=0.5)

            # Now fit
            lmfit_minimize_result = lmfit.minimize(lmfit_func, params, args = (HJD, RV,RV_ERR, False), method='powell')
            
            lmfit.printfuncs.report_fit(lmfit_minimize_result, min_correl=0.5)
            residual, phase_x, phase_rv = lmfit_func(lmfit_minimize_result.params, HJD, RV, RV_ERR, return_model = True)
            ax2[count].plot(phase_x, phase_rv, 'r')
        count +=1
    plt.savefig('{:}_LS_power.png'.format(args.name))
    plt.close()     
