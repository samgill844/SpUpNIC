#!/Users/sam/anaconda3/bin/python

########################################
# IMPORTS
########################################
import matplotlib.pyplot as plt
import numpy as np, os, sys
import argparse
from scipy.ndimage import median_filter, maximum_filter, minimum_filter
from scipy.interpolate import UnivariateSpline
from lmfit.models import GaussianModel, LorentzianModel
import lmfit 
from uncertainties import ufloat 
from barycorrpy import get_BC_vel # with barrcorpy you need astropy 4.0 as the time calls change
from astropy.io import fits 
from astropy.time import Time 
import glob 
from multiprocess import Pool

################################################################################
#--- iSpec directory -------------------------------------------------------------
ispec_dir = '/Users/sam/iSpec/'
sys.path.insert(0, os.path.abspath(ispec_dir))
import ispec


# Arg parser
def arg_parse():
    """
    Parse the command line arguments
    """
    p = argparse.ArgumentParser("Reduce whole actions.")
    p.add_argument('filename',
                   help='The filename',
                   type=str) 

    p.add_argument('--normalise', action="store_true", default=False)
    p.add_argument('-a', 
                '--median_filter_size',
                help='The size of the median_filter',
                default=20, type=int)   

    p.add_argument('-b', 
                '--maximum_filter_size',
                help='The size of the maximum filter',
                default=45, type=int)   

    p.add_argument('-c', 
                '--wavemin',
                help='The minimum of the cropped wavelength region for H-alpha',
                default=655.5, type=float)   

    p.add_argument('-d', 
                '--wavemax',
                help='The maximum of the cropped wavelength region for H-alpha',
                default=657, type=float) 

    p.add_argument('-e', 
                '--model',
                help='The model to use. G = Gaussian [default], L = Lorentzian, GL = Gaussian + Lorentzian.',
                default='G', type=str) 

    p.add_argument('--printfit', action="store_true", default=False)
    p.add_argument('--output', action="store_true", default=False)

    return p.parse_args()


def normalize_whole_spectrum(star_spectrum):
    """
    Use the whole spectrum, strategy 'median+max'
    """
    #--- Continuum fit -------------------------------------------------------------
    model = "Splines" # "Polynomy"
    degree = 2
    nknots = None # Automatic: 1 spline every 5 nm
    from_resolution = 5000

    # Strategy: Filter first median values and secondly MAXIMUMs in order to find the continuum
    order='median+max'
    median_wave_range=0.05
    max_wave_range=1.0

    star_continuum_model = ispec.fit_continuum(star_spectrum, from_resolution=from_resolution, \
                                nknots=nknots, degree=degree, \
                                median_wave_range=median_wave_range, \
                                max_wave_range=max_wave_range, \
                                model=model, order=order, \
                                automatic_strong_line_detection=True, \
                                strong_line_probability=0.5, \
                                use_errors_for_fitting=True)

    #--- Continuum normalization ---------------------------------------------------
    normalized_star_spectrum = ispec.normalize_spectrum(star_spectrum, star_continuum_model, consider_continuum_errors=False)
    # Use a fixed value because the spectrum is already normalized
    return normalized_star_spectrum, star_continuum_model


def normlaise_telluric_spectrum(spectrum):
    f, ax = plt.subplots(nrows=2, ncols=1)
    ax[0].scatter(spectrum['waveobs'], spectrum['flux'], c='k', s=1) 
    filtered = median_filter(minimum_filter(spectrum['flux'], 100), 100)
    trend = np.poly1d(np.polyfit(spectrum['waveobs'],filtered, 3))(spectrum['waveobs'])
    ax[0].plot(spectrum['waveobs'],trend, 'r')
    ax[1].scatter(spectrum['waveobs'], spectrum['flux'] / trend, c='k', s=1) 
    plt.savefig('{:}_telluric_lines.png'.format(args.filename[:-5]))
    plt.close()
    spectrum['flux'] = spectrum['flux'] /  trend
    return spectrum



def determine_radial_velocity_with_mask(mu_cas_spectrum, mask):
    #--- Radial Velocity determination with linelist mask --------------------------
    # - Read atomic data
    mask_file = ispec_dir + "input/linelists/CCF/Narval.Sun.370_1048nm/mask.lst"
    #mask_file = ispec_dir + "input/linelists/CCF/Atlas.Arcturus.372_926nm/mask.lst""
    #mask_file = ispec_dir + "input/linelists/CCF/Atlas.Sun.372_926nm/mask.lst"
    if   mask=='A0'   : mask_file = ispec_dir + "input/linelists/CCF/HARPS_SOPHIE.A0.350_1095nm/mask.lst"
    elif mask=='F0' : mask_file = ispec_dir + "input/linelists/CCF/HARPS_SOPHIE.F0.360_698nm/mask.lst"
    elif mask=='G2' : mask_file = ispec_dir + "input/linelists/CCF/HARPS_SOPHIE.G2.375_679nm/mask.lst"
    elif mask=='K0' : mask_file = ispec_dir + "input/linelists/CCF/HARPS_SOPHIE.K0.378_679nm/mask.lst"
    elif mask=='K5' : mask_file = ispec_dir + "input/linelists/CCF/HARPS_SOPHIE.K5.378_680nm/mask.lst"
    elif mask=='M5' : mask_file = ispec_dir + "input/linelists/CCF/HARPS_SOPHIE.M5.400_687nm/mask.lst"
    #mask_file = ispec_dir + "input/linelists/CCF/Synthetic.Sun.350_1100nm/mask.lst"
    #mask_file = ispec_dir + "input/linelists/CCF/VALD.Sun.300_1100nm/mask.lst"
    ccf_mask = ispec.read_cross_correlation_mask(mask_file)

    models, ccf = ispec.cross_correlate_with_mask(mu_cas_spectrum, ccf_mask, \
                            lower_velocity_limit=-100, upper_velocity_limit=100, \
                            velocity_step=1e-1, mask_depth=0.01, \
                            fourier=False)

    # Number of models represent the number of components
    components = len(models)
    # First component:


    with fits.open(args.filename, mode='update') as filehandle : 
        filehandle[0].header['{:}_RV'.format(mask)] = models[0].mu()
        filehandle[0].header['{:}_RV_ERR'.format(mask)] = models[0].emu()

    plt.plot(ccf.x, ccf.y,c='k')
    plt.title('{:}\n{:}'.format(models[0].mu(), models[0].emu()))
    plt.savefig('{:}_{:}_RV.png'.format(args.filename[:-5], mask))
    plt.close()


def func(i):
    os.system('spupnic_rv {:}'.format(files[i]))

# Main loop
if __name__=="__main__":
    # First, pars the arguments
    args = arg_parse()

    if "*" in args.filename:
        files = glob.glob(args.filename)
        #for i in range(len(files)) : func(i)
        pool = Pool(10)
        pool.map(func, range(len(files)))
        exit()

    # Now load the spectra 
    with fits.open(args.filename) as h:
        w,f,fe = h[0].data.T
        spectrum = ispec.create_spectrum_structure(w,f,fe)
        normed_spectrum, star_continuum_model = normalize_whole_spectrum(spectrum)

        ra = h[0].header['RA']
        dec = h[0].header['DEC']
        name = h[0].header['OBJECT']
        HJD = h[0].header['HJD-OBS']
        barycentric_velocity = h[0].header['BV']

        sky_spectrum = ispec.create_spectrum_structure(h[0].data[:,0], h[5].data[::-1],np.ones(h[5].data.shape[0]))
        normed_sky_spectrum= normlaise_telluric_spectrum(sky_spectrum)
        


    f , ax = plt.subplots(nrows=2,ncols=1)
    ax[0].plot(spectrum['waveobs'], spectrum['flux'], 'k')
    ax[0].plot(normed_spectrum['waveobs'], star_continuum_model(normed_spectrum['waveobs']), 'r')
    ax[1].plot(normed_spectrum['waveobs'], normed_spectrum['flux'], 'k')

    plt.savefig('{:}_spectra.png'.format(args.filename[:-5]))
    plt.close()

    # - Keep points between two given wavelengths
    wfilter = ispec.create_wavelength_filter(normed_spectrum, wave_base=645.0, wave_top=670.0)
    normed_spectrum = normed_spectrum[wfilter]
    
    # First thing to do is check the wavelength solution with the tellurics
    telluric_linelist_file = ispec_dir + "/input/linelists/CCF/Synth.Tellurics.500_1100nm/mask.lst"
    telluric_linelist = ispec.read_telluric_linelist(telluric_linelist_file, minimum_depth=0.0)

    models, ccf = ispec.cross_correlate_with_mask(normed_spectrum, telluric_linelist, \
                            lower_velocity_limit=-100, upper_velocity_limit=100, \
                            velocity_step=0.5, mask_depth=0.01, \
                            fourier = False,
                            only_one_peak = True)

    # Now plot
    f = plt.figure()
    plt.plot(ccf.x, ccf.y,c='k')
    plt.title('TELLURIC {:.2f} +- {:}.2f km/s'.format(models[0].mu(), models[0].emu()))
    plt.savefig('{:}_telluric_RV.png'.format(args.filename[:-5]))
    plt.close()
    print('Tellucirc shift {:} +- {:}'.format(models[0].mu(), models[0].emu()))

    # Now correct it
    normed_spectrum = ispec.correct_velocity(normed_spectrum, -models[0].mu())

    # Now correct for the barycentric velocity
    normed_spectrum = ispec.correct_velocity(normed_spectrum, -barycentric_velocity)


    determine_radial_velocity_with_mask(normed_spectrum, mask='A0')
    determine_radial_velocity_with_mask(normed_spectrum, mask='F0')
    determine_radial_velocity_with_mask(normed_spectrum, mask='G2')
    determine_radial_velocity_with_mask(normed_spectrum, mask='K0')
    determine_radial_velocity_with_mask(normed_spectrum, mask='K5')
    determine_radial_velocity_with_mask(normed_spectrum, mask='M5')

    